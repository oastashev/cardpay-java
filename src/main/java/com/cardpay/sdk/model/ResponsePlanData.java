/*
 * CardPay REST API
 * The CardPay API uses HTTP verbs and a RESTful endpoint structure. Request and response payloads are formatted as JSON.
 *
 * OpenAPI spec version: 3.0
 * Contact: support@cardpay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;

/**
 * Using for RecurringPlanResponse
 */
@ApiModel(description = "Using for RecurringPlanResponse")

public class ResponsePlanData {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  /**
   * Status of created plan: &#x60;active&#x60; or &#x60;hold&#x60;
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  /**
   * Period of created plan. &#x60;minute&#x60; value is not allowed for production site.
   */
  @JsonAdapter(PeriodEnum.Adapter.class)
  public enum PeriodEnum {
    MINUTE("minute"),
    
    DAY("day"),
    
    WEEK("week"),
    
    MONTH("month"),
    
    YEAR("year");

    private String value;

    PeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeriodEnum fromValue(String text) {
      for (PeriodEnum b : PeriodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PeriodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("period")
  private PeriodEnum period = null;

  @SerializedName("interval")
  private Integer interval = null;

  @SerializedName("currency")
  private String currency = null;

  @SerializedName("amount")
  private BigDecimal amount = null;

  @SerializedName("retries")
  private Integer retries = null;

  public ResponsePlanData id(String id) {
    this.id = id;
    return this;
  }

   /**
   * ID of created plan
   * @return id
  **/
  @ApiModelProperty(required = true, value = "ID of created plan")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ResponsePlanData name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of created plan
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name of created plan")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ResponsePlanData created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Time when this plan was created in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;)
   * @return created
  **/
  @ApiModelProperty(required = true, value = "Time when this plan was created in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (yyyy-MM-dd'T'HH:mm:ss'Z')")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public ResponsePlanData status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of created plan: &#x60;active&#x60; or &#x60;hold&#x60;
   * @return status
  **/
  @ApiModelProperty(required = true, value = "Status of created plan: `active` or `hold`")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ResponsePlanData period(PeriodEnum period) {
    this.period = period;
    return this;
  }

   /**
   * Period of created plan. &#x60;minute&#x60; value is not allowed for production site.
   * @return period
  **/
  @ApiModelProperty(required = true, value = "Period of created plan. `minute` value is not allowed for production site.")
  public PeriodEnum getPeriod() {
    return period;
  }

  public void setPeriod(PeriodEnum period) {
    this.period = period;
  }

  public ResponsePlanData interval(Integer interval) {
    this.interval = interval;
    return this;
  }

   /**
   * Interval of created plan
   * @return interval
  **/
  @ApiModelProperty(required = true, value = "Interval of created plan")
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(Integer interval) {
    this.interval = interval;
  }

  public ResponsePlanData currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of plan
   * @return currency
  **/
  @ApiModelProperty(example = "USD", required = true, value = "[ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of plan")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public ResponsePlanData amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The total amount of created plan
   * @return amount
  **/
  @ApiModelProperty(required = true, value = "The total amount of created plan")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public ResponsePlanData retries(Integer retries) {
    this.retries = retries;
    return this;
  }

   /**
   * Count of retries for Retry Logic
   * @return retries
  **/
  @ApiModelProperty(value = "Count of retries for Retry Logic")
  public Integer getRetries() {
    return retries;
  }

  public void setRetries(Integer retries) {
    this.retries = retries;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponsePlanData responsePlanData = (ResponsePlanData) o;
    return Objects.equals(this.id, responsePlanData.id) &&
        Objects.equals(this.name, responsePlanData.name) &&
        Objects.equals(this.created, responsePlanData.created) &&
        Objects.equals(this.status, responsePlanData.status) &&
        Objects.equals(this.period, responsePlanData.period) &&
        Objects.equals(this.interval, responsePlanData.interval) &&
        Objects.equals(this.currency, responsePlanData.currency) &&
        Objects.equals(this.amount, responsePlanData.amount) &&
        Objects.equals(this.retries, responsePlanData.retries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, created, status, period, interval, currency, amount, retries);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponsePlanData {\n");
    
    if (id != null) sb.append("    id: ").append(toIndentedString(id)).append("\n");
    if (name != null) sb.append("    name: ").append(toIndentedString(name)).append("\n");
    if (created != null) sb.append("    created: ").append(toIndentedString(created)).append("\n");
    if (status != null) sb.append("    status: ").append(toIndentedString(status)).append("\n");
    if (period != null) sb.append("    period: ").append(toIndentedString(period)).append("\n");
    if (interval != null) sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    if (currency != null) sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    if (amount != null) sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    if (retries != null) sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

