/*
 * CardPay REST API
 * The CardPay API uses HTTP verbs and a RESTful endpoint structure. Request and response payloads are formatted as JSON.
 *
 * OpenAPI spec version: 3.0
 * Contact: support@cardpay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.cardpay.sdk.model.ClaimSubscriptionData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * ChangeSubscriptionStatusClaimResponse
 */

public class ChangeSubscriptionStatusClaimResponse {
  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("details")
  private String details = null;

  @SerializedName("id")
  private String id = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IN_PROCESS("IN_PROCESS"),
    
    STOPPED("STOPPED"),
    
    COMPLETED("COMPLETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("subscription_data")
  private ClaimSubscriptionData subscriptionData = null;

  @SerializedName("updated")
  private OffsetDateTime updated = null;

  public ChangeSubscriptionStatusClaimResponse created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public ChangeSubscriptionStatusClaimResponse details(String details) {
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @ApiModelProperty(value = "")
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }

  public ChangeSubscriptionStatusClaimResponse id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ChangeSubscriptionStatusClaimResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ChangeSubscriptionStatusClaimResponse subscriptionData(ClaimSubscriptionData subscriptionData) {
    this.subscriptionData = subscriptionData;
    return this;
  }

   /**
   * Get subscriptionData
   * @return subscriptionData
  **/
  @ApiModelProperty(value = "")
  public ClaimSubscriptionData getSubscriptionData() {
    return subscriptionData;
  }

  public void setSubscriptionData(ClaimSubscriptionData subscriptionData) {
    this.subscriptionData = subscriptionData;
  }

  public ChangeSubscriptionStatusClaimResponse updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeSubscriptionStatusClaimResponse changeSubscriptionStatusClaimResponse = (ChangeSubscriptionStatusClaimResponse) o;
    return Objects.equals(this.created, changeSubscriptionStatusClaimResponse.created) &&
        Objects.equals(this.details, changeSubscriptionStatusClaimResponse.details) &&
        Objects.equals(this.id, changeSubscriptionStatusClaimResponse.id) &&
        Objects.equals(this.status, changeSubscriptionStatusClaimResponse.status) &&
        Objects.equals(this.subscriptionData, changeSubscriptionStatusClaimResponse.subscriptionData) &&
        Objects.equals(this.updated, changeSubscriptionStatusClaimResponse.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, details, id, status, subscriptionData, updated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeSubscriptionStatusClaimResponse {\n");
    
    if (created != null) sb.append("    created: ").append(toIndentedString(created)).append("\n");
    if (details != null) sb.append("    details: ").append(toIndentedString(details)).append("\n");
    if (id != null) sb.append("    id: ").append(toIndentedString(id)).append("\n");
    if (status != null) sb.append("    status: ").append(toIndentedString(status)).append("\n");
    if (subscriptionData != null) sb.append("    subscriptionData: ").append(toIndentedString(subscriptionData)).append("\n");
    if (updated != null) sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

