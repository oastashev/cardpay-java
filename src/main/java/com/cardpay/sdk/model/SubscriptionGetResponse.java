/*
 * CardPay REST API
 * The CardPay API uses HTTP verbs and a RESTful endpoint structure. Request and response payloads are formatted as JSON.
 *
 * OpenAPI spec version: 3.0
 * Contact: support@cardpay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.cardpay.sdk.model.NextSubscriptionPaymentforSubscriptionGetResponse;
import com.cardpay.sdk.model.PayoutCustomer;
import com.cardpay.sdk.model.Plan;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;

/**
 * SubscriptionGetResponse
 */

public class SubscriptionGetResponse {
  @SerializedName("amount_due")
  private BigDecimal amountDue = null;

  @SerializedName("amount_total")
  private BigDecimal amountTotal = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("currency")
  private String currency = null;

  @SerializedName("customer")
  private PayoutCustomer customer = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("interval")
  private Integer interval = null;

  @SerializedName("next_payment")
  private NextSubscriptionPaymentforSubscriptionGetResponse nextPayment = null;

  @SerializedName("payments_due")
  private Integer paymentsDue = null;

  /**
   * Period of subscription
   */
  @JsonAdapter(PeriodEnum.Adapter.class)
  public enum PeriodEnum {
    MINUTE("minute"),
    
    DAY("day"),
    
    WEEK("week"),
    
    MONTH("month"),
    
    YEAR("year");

    private String value;

    PeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeriodEnum fromValue(String text) {
      for (PeriodEnum b : PeriodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PeriodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("period")
  private PeriodEnum period = null;

  @SerializedName("plan")
  private Plan plan = null;

  @SerializedName("retries")
  private Integer retries = null;

  /**
   * Status of subscription
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE"),
    
    CANCELLED("CANCELLED"),
    
    PAST_DUE("PAST_DUE"),
    
    PENDING("PENDING"),
    
    COMPLETED("COMPLETED"),
    
    CARD_EXPIRED("CARD_EXPIRED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("status_reason")
  private String statusReason = null;

  @SerializedName("subscription_start")
  private OffsetDateTime subscriptionStart = null;

  /**
   * Type of subscription
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ONECLICK("ONECLICK"),
    
    SCHEDULED("SCHEDULED"),
    
    INSTALLMENT("INSTALLMENT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  public SubscriptionGetResponse amountDue(BigDecimal amountDue) {
    this.amountDue = amountDue;
    return this;
  }

   /**
   * Amount of payments left to be captured
   * @return amountDue
  **/
  @ApiModelProperty(value = "Amount of payments left to be captured")
  public BigDecimal getAmountDue() {
    return amountDue;
  }

  public void setAmountDue(BigDecimal amountDue) {
    this.amountDue = amountDue;
  }

  public SubscriptionGetResponse amountTotal(BigDecimal amountTotal) {
    this.amountTotal = amountTotal;
    return this;
  }

   /**
   * Total amount of subscription to be paid before completion
   * @return amountTotal
  **/
  @ApiModelProperty(value = "Total amount of subscription to be paid before completion")
  public BigDecimal getAmountTotal() {
    return amountTotal;
  }

  public void setAmountTotal(BigDecimal amountTotal) {
    this.amountTotal = amountTotal;
  }

  public SubscriptionGetResponse created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Creation time ISO 8601 format
   * @return created
  **/
  @ApiModelProperty(required = true, value = "Creation time ISO 8601 format")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public SubscriptionGetResponse currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * ISO 4217 currency code
   * @return currency
  **/
  @ApiModelProperty(value = "ISO 4217 currency code")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public SubscriptionGetResponse customer(PayoutCustomer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Account id that has subscription applied
   * @return customer
  **/
  @ApiModelProperty(required = true, value = "Account id that has subscription applied")
  public PayoutCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(PayoutCustomer customer) {
    this.customer = customer;
  }

  public SubscriptionGetResponse description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of subscription
   * @return description
  **/
  @ApiModelProperty(required = true, value = "Description of subscription")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public SubscriptionGetResponse id(String id) {
    this.id = id;
    return this;
  }

   /**
   * ID of subscription
   * @return id
  **/
  @ApiModelProperty(required = true, value = "ID of subscription")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public SubscriptionGetResponse interval(Integer interval) {
    this.interval = interval;
    return this;
  }

   /**
   * Interval of subscription
   * @return interval
  **/
  @ApiModelProperty(value = "Interval of subscription")
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(Integer interval) {
    this.interval = interval;
  }

  public SubscriptionGetResponse nextPayment(NextSubscriptionPaymentforSubscriptionGetResponse nextPayment) {
    this.nextPayment = nextPayment;
    return this;
  }

   /**
   * Next payment data
   * @return nextPayment
  **/
  @ApiModelProperty(value = "Next payment data")
  public NextSubscriptionPaymentforSubscriptionGetResponse getNextPayment() {
    return nextPayment;
  }

  public void setNextPayment(NextSubscriptionPaymentforSubscriptionGetResponse nextPayment) {
    this.nextPayment = nextPayment;
  }

  public SubscriptionGetResponse paymentsDue(Integer paymentsDue) {
    this.paymentsDue = paymentsDue;
    return this;
  }

   /**
   * Number of payments left to be captured
   * @return paymentsDue
  **/
  @ApiModelProperty(value = "Number of payments left to be captured")
  public Integer getPaymentsDue() {
    return paymentsDue;
  }

  public void setPaymentsDue(Integer paymentsDue) {
    this.paymentsDue = paymentsDue;
  }

  public SubscriptionGetResponse period(PeriodEnum period) {
    this.period = period;
    return this;
  }

   /**
   * Period of subscription
   * @return period
  **/
  @ApiModelProperty(value = "Period of subscription")
  public PeriodEnum getPeriod() {
    return period;
  }

  public void setPeriod(PeriodEnum period) {
    this.period = period;
  }

  public SubscriptionGetResponse plan(Plan plan) {
    this.plan = plan;
    return this;
  }

   /**
   * Name of plan
   * @return plan
  **/
  @ApiModelProperty(value = "Name of plan")
  public Plan getPlan() {
    return plan;
  }

  public void setPlan(Plan plan) {
    this.plan = plan;
  }

  public SubscriptionGetResponse retries(Integer retries) {
    this.retries = retries;
    return this;
  }

   /**
   * Count of retries in retry logic
   * @return retries
  **/
  @ApiModelProperty(value = "Count of retries in retry logic")
  public Integer getRetries() {
    return retries;
  }

  public void setRetries(Integer retries) {
    this.retries = retries;
  }

  public SubscriptionGetResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of subscription
   * @return status
  **/
  @ApiModelProperty(required = true, value = "Status of subscription")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public SubscriptionGetResponse statusReason(String statusReason) {
    this.statusReason = statusReason;
    return this;
  }

   /**
   * Reason of subscription cancellation that was made by Cardpay
   * @return statusReason
  **/
  @ApiModelProperty(value = "Reason of subscription cancellation that was made by Cardpay")
  public String getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(String statusReason) {
    this.statusReason = statusReason;
  }

  public SubscriptionGetResponse subscriptionStart(OffsetDateTime subscriptionStart) {
    this.subscriptionStart = subscriptionStart;
    return this;
  }

   /**
   * The time in &#39;yyyy-MM-dd&#39; format when subscription actually becomes activated (grace period)
   * @return subscriptionStart
  **/
  @ApiModelProperty(value = "The time in 'yyyy-MM-dd' format when subscription actually becomes activated (grace period)")
  public OffsetDateTime getSubscriptionStart() {
    return subscriptionStart;
  }

  public void setSubscriptionStart(OffsetDateTime subscriptionStart) {
    this.subscriptionStart = subscriptionStart;
  }

  public SubscriptionGetResponse type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of subscription
   * @return type
  **/
  @ApiModelProperty(value = "Type of subscription")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionGetResponse subscriptionGetResponse = (SubscriptionGetResponse) o;
    return Objects.equals(this.amountDue, subscriptionGetResponse.amountDue) &&
        Objects.equals(this.amountTotal, subscriptionGetResponse.amountTotal) &&
        Objects.equals(this.created, subscriptionGetResponse.created) &&
        Objects.equals(this.currency, subscriptionGetResponse.currency) &&
        Objects.equals(this.customer, subscriptionGetResponse.customer) &&
        Objects.equals(this.description, subscriptionGetResponse.description) &&
        Objects.equals(this.id, subscriptionGetResponse.id) &&
        Objects.equals(this.interval, subscriptionGetResponse.interval) &&
        Objects.equals(this.nextPayment, subscriptionGetResponse.nextPayment) &&
        Objects.equals(this.paymentsDue, subscriptionGetResponse.paymentsDue) &&
        Objects.equals(this.period, subscriptionGetResponse.period) &&
        Objects.equals(this.plan, subscriptionGetResponse.plan) &&
        Objects.equals(this.retries, subscriptionGetResponse.retries) &&
        Objects.equals(this.status, subscriptionGetResponse.status) &&
        Objects.equals(this.statusReason, subscriptionGetResponse.statusReason) &&
        Objects.equals(this.subscriptionStart, subscriptionGetResponse.subscriptionStart) &&
        Objects.equals(this.type, subscriptionGetResponse.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountDue, amountTotal, created, currency, customer, description, id, interval, nextPayment, paymentsDue, period, plan, retries, status, statusReason, subscriptionStart, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionGetResponse {\n");
    
    if (amountDue != null) sb.append("    amountDue: ").append(toIndentedString(amountDue)).append("\n");
    if (amountTotal != null) sb.append("    amountTotal: ").append(toIndentedString(amountTotal)).append("\n");
    if (created != null) sb.append("    created: ").append(toIndentedString(created)).append("\n");
    if (currency != null) sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    if (customer != null) sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    if (description != null) sb.append("    description: ").append(toIndentedString(description)).append("\n");
    if (id != null) sb.append("    id: ").append(toIndentedString(id)).append("\n");
    if (interval != null) sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    if (nextPayment != null) sb.append("    nextPayment: ").append(toIndentedString(nextPayment)).append("\n");
    if (paymentsDue != null) sb.append("    paymentsDue: ").append(toIndentedString(paymentsDue)).append("\n");
    if (period != null) sb.append("    period: ").append(toIndentedString(period)).append("\n");
    if (plan != null) sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    if (retries != null) sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    if (status != null) sb.append("    status: ").append(toIndentedString(status)).append("\n");
    if (statusReason != null) sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    if (subscriptionStart != null) sb.append("    subscriptionStart: ").append(toIndentedString(subscriptionStart)).append("\n");
    if (type != null) sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

