/*
 * CardPay REST API
 * The CardPay API uses HTTP verbs and a RESTful endpoint structure. Request and response payloads are formatted as JSON.
 *
 * OpenAPI spec version: 3.0
 * Contact: support@cardpay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.cardpay.sdk.model.CardAccount;
import com.cardpay.sdk.model.CryptocurrencyAccount;
import com.cardpay.sdk.model.Customer;
import com.cardpay.sdk.model.EWalletAccount;
import com.cardpay.sdk.model.MerchantOrder;
import com.cardpay.sdk.model.ResponseUpdatedTransactionData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ## Fields for &#x60;CHANGE_STATUS&#x60; operation * operation * merchant_data * payment_data ## Fields for &#x60;CONFIRM_3DS&#x60; operation * payment_method * merchant_data * payment_data * card_account * cryptocurrency_account * ewallet_account * customer  
 */
@ApiModel(description = "## Fields for `CHANGE_STATUS` operation * operation * merchant_data * payment_data ## Fields for `CONFIRM_3DS` operation * payment_method * merchant_data * payment_data * card_account * cryptocurrency_account * ewallet_account * customer  ")

public class PaymentUpdateResponse {
  /**
   * &#x60;CHANGE_STATUS&#x60; value
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    CHANGE_STATUS("CHANGE_STATUS"),
    
    CONFIRM_3DS("CONFIRM_3DS");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationEnum fromValue(String text) {
      for (OperationEnum b : OperationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("operation")
  private OperationEnum operation = null;

  @SerializedName("payment_method")
  private String paymentMethod = null;

  @SerializedName("merchant_data")
  private MerchantOrder merchantData = null;

  @SerializedName("payment_data")
  private ResponseUpdatedTransactionData paymentData = null;

  @SerializedName("card_account")
  private CardAccount cardAccount = null;

  @SerializedName("cryptocurrency_account")
  private CryptocurrencyAccount cryptocurrencyAccount = null;

  @SerializedName("ewallet_account")
  private EWalletAccount ewalletAccount = null;

  @SerializedName("customer")
  private Customer customer = null;

  public PaymentUpdateResponse operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

   /**
   * &#x60;CHANGE_STATUS&#x60; value
   * @return operation
  **/
  @ApiModelProperty(value = "`CHANGE_STATUS` value")
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }

  public PaymentUpdateResponse paymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Used payment method type name from payment methods list
   * @return paymentMethod
  **/
  @ApiModelProperty(example = "BANKCARD", value = "Used payment method type name from payment methods list")
  public String getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public PaymentUpdateResponse merchantData(MerchantOrder merchantData) {
    this.merchantData = merchantData;
    return this;
  }

   /**
   * Get merchantData
   * @return merchantData
  **/
  @ApiModelProperty(value = "")
  public MerchantOrder getMerchantData() {
    return merchantData;
  }

  public void setMerchantData(MerchantOrder merchantData) {
    this.merchantData = merchantData;
  }

  public PaymentUpdateResponse paymentData(ResponseUpdatedTransactionData paymentData) {
    this.paymentData = paymentData;
    return this;
  }

   /**
   * Get paymentData
   * @return paymentData
  **/
  @ApiModelProperty(value = "")
  public ResponseUpdatedTransactionData getPaymentData() {
    return paymentData;
  }

  public void setPaymentData(ResponseUpdatedTransactionData paymentData) {
    this.paymentData = paymentData;
  }

  public PaymentUpdateResponse cardAccount(CardAccount cardAccount) {
    this.cardAccount = cardAccount;
    return this;
  }

   /**
   * Get cardAccount
   * @return cardAccount
  **/
  @ApiModelProperty(value = "")
  public CardAccount getCardAccount() {
    return cardAccount;
  }

  public void setCardAccount(CardAccount cardAccount) {
    this.cardAccount = cardAccount;
  }

  public PaymentUpdateResponse cryptocurrencyAccount(CryptocurrencyAccount cryptocurrencyAccount) {
    this.cryptocurrencyAccount = cryptocurrencyAccount;
    return this;
  }

   /**
   * Cryptocurrency account data *(for BITCOIN payment method only)*
   * @return cryptocurrencyAccount
  **/
  @ApiModelProperty(value = "Cryptocurrency account data *(for BITCOIN payment method only)*")
  public CryptocurrencyAccount getCryptocurrencyAccount() {
    return cryptocurrencyAccount;
  }

  public void setCryptocurrencyAccount(CryptocurrencyAccount cryptocurrencyAccount) {
    this.cryptocurrencyAccount = cryptocurrencyAccount;
  }

  public PaymentUpdateResponse ewalletAccount(EWalletAccount ewalletAccount) {
    this.ewalletAccount = ewalletAccount;
    return this;
  }

   /**
   * eWallet account data *(for ALIPAY, QIWI, WEBMONEY and NETELLER payment methods only)*
   * @return ewalletAccount
  **/
  @ApiModelProperty(value = "eWallet account data *(for ALIPAY, QIWI, WEBMONEY and NETELLER payment methods only)*")
  public EWalletAccount getEwalletAccount() {
    return ewalletAccount;
  }

  public void setEwalletAccount(EWalletAccount ewalletAccount) {
    this.ewalletAccount = ewalletAccount;
  }

  public PaymentUpdateResponse customer(Customer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Customer data
   * @return customer
  **/
  @ApiModelProperty(value = "Customer data")
  public Customer getCustomer() {
    return customer;
  }

  public void setCustomer(Customer customer) {
    this.customer = customer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentUpdateResponse paymentUpdateResponse = (PaymentUpdateResponse) o;
    return Objects.equals(this.operation, paymentUpdateResponse.operation) &&
        Objects.equals(this.paymentMethod, paymentUpdateResponse.paymentMethod) &&
        Objects.equals(this.merchantData, paymentUpdateResponse.merchantData) &&
        Objects.equals(this.paymentData, paymentUpdateResponse.paymentData) &&
        Objects.equals(this.cardAccount, paymentUpdateResponse.cardAccount) &&
        Objects.equals(this.cryptocurrencyAccount, paymentUpdateResponse.cryptocurrencyAccount) &&
        Objects.equals(this.ewalletAccount, paymentUpdateResponse.ewalletAccount) &&
        Objects.equals(this.customer, paymentUpdateResponse.customer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operation, paymentMethod, merchantData, paymentData, cardAccount, cryptocurrencyAccount, ewalletAccount, customer);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentUpdateResponse {\n");
    
    if (operation != null) sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    if (paymentMethod != null) sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    if (merchantData != null) sb.append("    merchantData: ").append(toIndentedString(merchantData)).append("\n");
    if (paymentData != null) sb.append("    paymentData: ").append(toIndentedString(paymentData)).append("\n");
    if (cardAccount != null) sb.append("    cardAccount: ").append(toIndentedString(cardAccount)).append("\n");
    if (cryptocurrencyAccount != null) sb.append("    cryptocurrencyAccount: ").append(toIndentedString(cryptocurrencyAccount)).append("\n");
    if (ewalletAccount != null) sb.append("    ewalletAccount: ").append(toIndentedString(ewalletAccount)).append("\n");
    if (customer != null) sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

