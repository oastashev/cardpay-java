/*
 * CardPay REST API
 * The CardPay API uses HTTP verbs and a RESTful endpoint structure. Request and response payloads are formatted as JSON.
 *
 * OpenAPI spec version: 3.0
 * Contact: support@cardpay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * Using for RefundResponse
 */
@ApiModel(description = "Using for RefundResponse")

public class ResponseRefundData {
  @SerializedName("amount")
  private BigDecimal amount = null;

  @SerializedName("auth_code")
  private String authCode = null;

  @SerializedName("created")
  private String created = null;

  @SerializedName("currency")
  private String currency = null;

  @SerializedName("decline_code")
  private String declineCode = null;

  @SerializedName("decline_reason")
  private String declineReason = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("is_3d")
  private Boolean is3d = null;

  @SerializedName("rrn")
  private String rrn = null;

  /**
   * Refund **status** in CardPay system
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("NEW"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    DECLINED("DECLINED"),
    
    AUTHORIZED("AUTHORIZED"),
    
    COMPLETED("COMPLETED"),
    
    CANCELLED("CANCELLED"),
    
    REFUNDED("REFUNDED"),
    
    PARTIALLY_REFUNDED("PARTIALLY_REFUNDED"),
    
    VOIDED("VOIDED"),
    
    CHARGED_BACK("CHARGED_BACK"),
    
    CHARGEBACK_RESOLVED("CHARGEBACK_RESOLVED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  public ResponseRefundData amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Refund transaction amount
   * @return amount
  **/
  @ApiModelProperty(example = "21.12", required = true, value = "Refund transaction amount")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public ResponseRefundData authCode(String authCode) {
    this.authCode = authCode;
    return this;
  }

   /**
   * Authorization code, provided by bank *(for BANK_CARD payment methods only)*
   * @return authCode
  **/
  @ApiModelProperty(example = "AB73F9", value = "Authorization code, provided by bank *(for BANK_CARD payment methods only)*")
  public String getAuthCode() {
    return authCode;
  }

  public void setAuthCode(String authCode) {
    this.authCode = authCode;
  }

  public ResponseRefundData created(String created) {
    this.created = created;
    return this;
  }

   /**
   * Refund creation date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)
   * @return created
  **/
  @ApiModelProperty(example = "2018-08-28T09:09:49Z", required = true, value = "Refund creation date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)")
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }

  public ResponseRefundData currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Currency of refunded amount, [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code
   * @return currency
  **/
  @ApiModelProperty(example = "USD", required = true, value = "Currency of refunded amount, [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public ResponseRefundData declineCode(String declineCode) {
    this.declineCode = declineCode;
    return this;
  }

   /**
   * Refund **decline code** (only for DECLINED refund status)
   * @return declineCode
  **/
  @ApiModelProperty(example = "02", value = "Refund **decline code** (only for DECLINED refund status)")
  public String getDeclineCode() {
    return declineCode;
  }

  public void setDeclineCode(String declineCode) {
    this.declineCode = declineCode;
  }

  public ResponseRefundData declineReason(String declineReason) {
    this.declineReason = declineReason;
    return this;
  }

   /**
   * Refund decline reason (only for DECLINED refund status)
   * @return declineReason
  **/
  @ApiModelProperty(example = "Cancelled by customer", value = "Refund decline reason (only for DECLINED refund status)")
  public String getDeclineReason() {
    return declineReason;
  }

  public void setDeclineReason(String declineReason) {
    this.declineReason = declineReason;
  }

  public ResponseRefundData id(String id) {
    this.id = id;
    return this;
  }

   /**
   * ID of the newly created refund in CardPay system
   * @return id
  **/
  @ApiModelProperty(example = "299150", required = true, value = "ID of the newly created refund in CardPay system")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ResponseRefundData is3d(Boolean is3d) {
    this.is3d = is3d;
    return this;
  }

   /**
   * Was 3-D Secure authentication made or not *(for BANK_CARD payment methods only)*
   * @return is3d
  **/
  @ApiModelProperty(example = "true", value = "Was 3-D Secure authentication made or not *(for BANK_CARD payment methods only)*")
  public Boolean isIs3d() {
    return is3d;
  }

  public void setIs3d(Boolean is3d) {
    this.is3d = is3d;
  }

  public ResponseRefundData rrn(String rrn) {
    this.rrn = rrn;
    return this;
  }

   /**
   * RRN (Retrieval Reference Number), supplied by the acquiring financial institution *(for BANK_CARD payment methods only)*
   * @return rrn
  **/
  @ApiModelProperty(example = "4367237627623", value = "RRN (Retrieval Reference Number), supplied by the acquiring financial institution *(for BANK_CARD payment methods only)*")
  public String getRrn() {
    return rrn;
  }

  public void setRrn(String rrn) {
    this.rrn = rrn;
  }

  public ResponseRefundData status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Refund **status** in CardPay system
   * @return status
  **/
  @ApiModelProperty(example = "COMPLETED", required = true, value = "Refund **status** in CardPay system")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseRefundData responseRefundData = (ResponseRefundData) o;
    return Objects.equals(this.amount, responseRefundData.amount) &&
        Objects.equals(this.authCode, responseRefundData.authCode) &&
        Objects.equals(this.created, responseRefundData.created) &&
        Objects.equals(this.currency, responseRefundData.currency) &&
        Objects.equals(this.declineCode, responseRefundData.declineCode) &&
        Objects.equals(this.declineReason, responseRefundData.declineReason) &&
        Objects.equals(this.id, responseRefundData.id) &&
        Objects.equals(this.is3d, responseRefundData.is3d) &&
        Objects.equals(this.rrn, responseRefundData.rrn) &&
        Objects.equals(this.status, responseRefundData.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, authCode, created, currency, declineCode, declineReason, id, is3d, rrn, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseRefundData {\n");
    
    if (amount != null) sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    if (authCode != null) sb.append("    authCode: ").append(toIndentedString(authCode)).append("\n");
    if (created != null) sb.append("    created: ").append(toIndentedString(created)).append("\n");
    if (currency != null) sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    if (declineCode != null) sb.append("    declineCode: ").append(toIndentedString(declineCode)).append("\n");
    if (declineReason != null) sb.append("    declineReason: ").append(toIndentedString(declineReason)).append("\n");
    if (id != null) sb.append("    id: ").append(toIndentedString(id)).append("\n");
    if (is3d != null) sb.append("    is3d: ").append(toIndentedString(is3d)).append("\n");
    if (rrn != null) sb.append("    rrn: ").append(toIndentedString(rrn)).append("\n");
    if (status != null) sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

