/*
 * CardPay REST API
 * The CardPay API uses HTTP verbs and a RESTful endpoint structure. Request and response payloads are formatted as JSON.
 *
 * OpenAPI spec version: 3.0
 * Contact: support@cardpay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Using for PlanUpdateRequest
 */
@ApiModel(description = "Using for PlanUpdateRequest")

public class UpdatePlanData {
  @SerializedName("name_to")
  private String nameTo = null;

  /**
   * New state of plan (&#x60;active&#x60; or &#x60;hold&#x60;)
   */
  @JsonAdapter(StatusToEnum.Adapter.class)
  public enum StatusToEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE");

    private String value;

    StatusToEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusToEnum fromValue(String text) {
      for (StatusToEnum b : StatusToEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusToEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusToEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusToEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusToEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status_to")
  private StatusToEnum statusTo = null;

  public UpdatePlanData nameTo(String nameTo) {
    this.nameTo = nameTo;
    return this;
  }

   /**
   * New plan name
   * @return nameTo
  **/
  @ApiModelProperty(value = "New plan name")
  public String getNameTo() {
    return nameTo;
  }

  public void setNameTo(String nameTo) {
    this.nameTo = nameTo;
  }

  public UpdatePlanData statusTo(StatusToEnum statusTo) {
    this.statusTo = statusTo;
    return this;
  }

   /**
   * New state of plan (&#x60;active&#x60; or &#x60;hold&#x60;)
   * @return statusTo
  **/
  @ApiModelProperty(example = "hold", value = "New state of plan (`active` or `hold`)")
  public StatusToEnum getStatusTo() {
    return statusTo;
  }

  public void setStatusTo(StatusToEnum statusTo) {
    this.statusTo = statusTo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePlanData updatePlanData = (UpdatePlanData) o;
    return Objects.equals(this.nameTo, updatePlanData.nameTo) &&
        Objects.equals(this.statusTo, updatePlanData.statusTo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nameTo, statusTo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePlanData {\n");
    
    if (nameTo != null) sb.append("    nameTo: ").append(toIndentedString(nameTo)).append("\n");
    if (statusTo != null) sb.append("    statusTo: ").append(toIndentedString(statusTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

