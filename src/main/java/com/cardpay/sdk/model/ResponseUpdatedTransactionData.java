/*
 * CardPay REST API
 * The CardPay API uses HTTP verbs and a RESTful endpoint structure. Request and response payloads are formatted as JSON.
 *
 * OpenAPI spec version: 3.0
 * Contact: support@cardpay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Using for PaymentResponse, RefundResponse and PayoutResponse
 */
@ApiModel(description = "Using for PaymentResponse, RefundResponse and PayoutResponse")

public class ResponseUpdatedTransactionData {
  @SerializedName("details")
  private String details = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("is_executed")
  private Boolean isExecuted = null;

  /**
   * **Status** of modified or created transaction
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("NEW"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    DECLINED("DECLINED"),
    
    AUTHORIZED("AUTHORIZED"),
    
    COMPLETED("COMPLETED"),
    
    CANCELLED("CANCELLED"),
    
    REFUNDED("REFUNDED"),
    
    PARTIALLY_REFUNDED("PARTIALLY_REFUNDED"),
    
    VOIDED("VOIDED"),
    
    CHARGED_BACK("CHARGED_BACK"),
    
    CHARGEBACK_RESOLVED("CHARGEBACK_RESOLVED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  /**
   * Requested action (status to be set).  Payment: &#x60;COMPLETE&#x60; or &#x60;REVERSE&#x60;.  Refund, payout: &#x60;REVERSE&#x60;.
   */
  @JsonAdapter(StatusToEnum.Adapter.class)
  public enum StatusToEnum {
    COMPLETE("COMPLETE"),
    
    REVERSE("REVERSE");

    private String value;

    StatusToEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusToEnum fromValue(String text) {
      for (StatusToEnum b : StatusToEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusToEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusToEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusToEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusToEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status_to")
  private StatusToEnum statusTo = null;

  @SerializedName("updated")
  private OffsetDateTime updated = null;

  public ResponseUpdatedTransactionData details(String details) {
    this.details = details;
    return this;
  }

   /**
   * The reason why request was unsuccessful
   * @return details
  **/
  @ApiModelProperty(value = "The reason why request was unsuccessful")
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }

  public ResponseUpdatedTransactionData id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Represents the ID of the modified transaction
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Represents the ID of the modified transaction")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ResponseUpdatedTransactionData isExecuted(Boolean isExecuted) {
    this.isExecuted = isExecuted;
    return this;
  }

   /**
   * Indicates was the request successful or not
   * @return isExecuted
  **/
  @ApiModelProperty(required = true, value = "Indicates was the request successful or not")
  public Boolean isIsExecuted() {
    return isExecuted;
  }

  public void setIsExecuted(Boolean isExecuted) {
    this.isExecuted = isExecuted;
  }

  public ResponseUpdatedTransactionData status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * **Status** of modified or created transaction
   * @return status
  **/
  @ApiModelProperty(required = true, value = "**Status** of modified or created transaction")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ResponseUpdatedTransactionData statusTo(StatusToEnum statusTo) {
    this.statusTo = statusTo;
    return this;
  }

   /**
   * Requested action (status to be set).  Payment: &#x60;COMPLETE&#x60; or &#x60;REVERSE&#x60;.  Refund, payout: &#x60;REVERSE&#x60;.
   * @return statusTo
  **/
  @ApiModelProperty(required = true, value = "Requested action (status to be set).  Payment: `COMPLETE` or `REVERSE`.  Refund, payout: `REVERSE`.")
  public StatusToEnum getStatusTo() {
    return statusTo;
  }

  public void setStatusTo(StatusToEnum statusTo) {
    this.statusTo = statusTo;
  }

  public ResponseUpdatedTransactionData updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

   /**
   * Transaction update date
   * @return updated
  **/
  @ApiModelProperty(example = "2018-10-28T09:09:53Z", value = "Transaction update date")
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseUpdatedTransactionData responseUpdatedTransactionData = (ResponseUpdatedTransactionData) o;
    return Objects.equals(this.details, responseUpdatedTransactionData.details) &&
        Objects.equals(this.id, responseUpdatedTransactionData.id) &&
        Objects.equals(this.isExecuted, responseUpdatedTransactionData.isExecuted) &&
        Objects.equals(this.status, responseUpdatedTransactionData.status) &&
        Objects.equals(this.statusTo, responseUpdatedTransactionData.statusTo) &&
        Objects.equals(this.updated, responseUpdatedTransactionData.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(details, id, isExecuted, status, statusTo, updated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseUpdatedTransactionData {\n");
    
    if (details != null) sb.append("    details: ").append(toIndentedString(details)).append("\n");
    if (id != null) sb.append("    id: ").append(toIndentedString(id)).append("\n");
    if (isExecuted != null) sb.append("    isExecuted: ").append(toIndentedString(isExecuted)).append("\n");
    if (status != null) sb.append("    status: ").append(toIndentedString(status)).append("\n");
    if (statusTo != null) sb.append("    statusTo: ").append(toIndentedString(statusTo)).append("\n");
    if (updated != null) sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

