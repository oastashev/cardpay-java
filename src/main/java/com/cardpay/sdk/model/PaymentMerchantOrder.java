/*
 * CardPay REST API
 * The CardPay API uses HTTP verbs and a RESTful endpoint structure. Request and response payloads are formatted as JSON.
 *
 * OpenAPI spec version: 3.0
 * Contact: support@cardpay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.cardpay.sdk.model.Flights;
import com.cardpay.sdk.model.Item;
import com.cardpay.sdk.model.ShippingAddress;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Relates to PaymentRequest and RecurringRequest
 */
@ApiModel(description = "Relates to PaymentRequest and RecurringRequest")

public class PaymentMerchantOrder {
  @SerializedName("description")
  private String description = null;

  @SerializedName("flights")
  private Flights flights = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("items")
  private List<Item> items = null;

  @SerializedName("shipping_address")
  private ShippingAddress shippingAddress = null;

  public PaymentMerchantOrder description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of product/service being sold
   * @return description
  **/
  @ApiModelProperty(example = "Example order", required = true, value = "Description of product/service being sold")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PaymentMerchantOrder flights(Flights flights) {
    this.flights = flights;
    return this;
  }

   /**
   * Flights data *(for BANKCARD payment method only)*
   * @return flights
  **/
  @ApiModelProperty(value = "Flights data *(for BANKCARD payment method only)*")
  public Flights getFlights() {
    return flights;
  }

  public void setFlights(Flights flights) {
    this.flights = flights;
  }

  public PaymentMerchantOrder id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Order ID used by the merchant&#39;s shopping cart
   * @return id
  **/
  @ApiModelProperty(example = "order00017", required = true, value = "Order ID used by the merchant's shopping cart")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PaymentMerchantOrder items(List<Item> items) {
    this.items = items;
    return this;
  }

  public PaymentMerchantOrder addItemsItem(Item itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * List of order positions (items in the shopping cart)
   * @return items
  **/
  @ApiModelProperty(value = "List of order positions (items in the shopping cart)")
  public List<Item> getItems() {
    return items;
  }

  public void setItems(List<Item> items) {
    this.items = items;
  }

  public PaymentMerchantOrder shippingAddress(ShippingAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Shipping address is the address where the order will be delivered.  It is used in Anti-fraud System and also can be seen in Merchant Account (Transactions).  But this address field may be omitted and all the subfields inside it may be omitted too except Country.
   * @return shippingAddress
  **/
  @ApiModelProperty(value = "Shipping address is the address where the order will be delivered.  It is used in Anti-fraud System and also can be seen in Merchant Account (Transactions).  But this address field may be omitted and all the subfields inside it may be omitted too except Country.")
  public ShippingAddress getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(ShippingAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentMerchantOrder paymentMerchantOrder = (PaymentMerchantOrder) o;
    return Objects.equals(this.description, paymentMerchantOrder.description) &&
        Objects.equals(this.flights, paymentMerchantOrder.flights) &&
        Objects.equals(this.id, paymentMerchantOrder.id) &&
        Objects.equals(this.items, paymentMerchantOrder.items) &&
        Objects.equals(this.shippingAddress, paymentMerchantOrder.shippingAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, flights, id, items, shippingAddress);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentMerchantOrder {\n");
    
    if (description != null) sb.append("    description: ").append(toIndentedString(description)).append("\n");
    if (flights != null) sb.append("    flights: ").append(toIndentedString(flights)).append("\n");
    if (id != null) sb.append("    id: ").append(toIndentedString(id)).append("\n");
    if (items != null) sb.append("    items: ").append(toIndentedString(items)).append("\n");
    if (shippingAddress != null) sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

