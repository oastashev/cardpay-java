/*
 * CardPay REST API
 * The CardPay API uses HTTP verbs and a RESTful endpoint structure. Request and response payloads are formatted as JSON.
 *
 * OpenAPI spec version: 3.0
 * Contact: support@cardpay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.cardpay.sdk.model.BillingAddress;
import com.cardpay.sdk.model.PayoutCard;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * For BANKCARD payment method only
 */
@ApiModel(description = "For BANKCARD payment method only")

public class PayoutCardAccount {
  @SerializedName("billing_address")
  private BillingAddress billingAddress = null;

  @SerializedName("card")
  private PayoutCard card = null;

  @SerializedName("recipient_info")
  private String recipientInfo = null;

  @SerializedName("token")
  private String token = null;

  public PayoutCardAccount billingAddress(BillingAddress billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Address for billing
   * @return billingAddress
  **/
  @ApiModelProperty(value = "Address for billing")
  public BillingAddress getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(BillingAddress billingAddress) {
    this.billingAddress = billingAddress;
  }

  public PayoutCardAccount card(PayoutCard card) {
    this.card = card;
    return this;
  }

   /**
   * Represents a payout card, required if &#x60;card_account.token&#x60; element isn&#39;t presented
   * @return card
  **/
  @ApiModelProperty(required = true, value = "Represents a payout card, required if `card_account.token` element isn't presented")
  public PayoutCard getCard() {
    return card;
  }

  public void setCard(PayoutCard card) {
    this.card = card;
  }

  public PayoutCardAccount recipientInfo(String recipientInfo) {
    this.recipientInfo = recipientInfo;
    return this;
  }

   /**
   * Property &#x60;recipient_info&#x60; may be required by Bank. In most cases it&#39;s Cardholder&#39;s name, contact CardPay manager for requirements. It must be omitted when property &#x60;token&#x60; is presented
   * @return recipientInfo
  **/
  @ApiModelProperty(required = true, value = "Property `recipient_info` may be required by Bank. In most cases it's Cardholder's name, contact CardPay manager for requirements. It must be omitted when property `token` is presented")
  public String getRecipientInfo() {
    return recipientInfo;
  }

  public void setRecipientInfo(String recipientInfo) {
    this.recipientInfo = recipientInfo;
  }

  public PayoutCardAccount token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Card token value, used instead of a card data
   * @return token
  **/
  @ApiModelProperty(value = "Card token value, used instead of a card data")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayoutCardAccount payoutCardAccount = (PayoutCardAccount) o;
    return Objects.equals(this.billingAddress, payoutCardAccount.billingAddress) &&
        Objects.equals(this.card, payoutCardAccount.card) &&
        Objects.equals(this.recipientInfo, payoutCardAccount.recipientInfo) &&
        Objects.equals(this.token, payoutCardAccount.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAddress, card, recipientInfo, token);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayoutCardAccount {\n");
    
    if (billingAddress != null) sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    if (card != null) sb.append("    card: ").append(toIndentedString(card)).append("\n");
    if (recipientInfo != null) sb.append("    recipientInfo: ").append(toIndentedString(recipientInfo)).append("\n");
    if (token != null) sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

