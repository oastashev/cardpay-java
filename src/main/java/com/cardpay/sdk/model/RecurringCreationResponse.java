/*
 * CardPay REST API
 * The CardPay API uses HTTP verbs and a RESTful endpoint structure. Request and response payloads are formatted as JSON.
 *
 * OpenAPI spec version: 3.0
 * Contact: support@cardpay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.cardpay.sdk.model.CardAccount;
import com.cardpay.sdk.model.CryptocurrencyAccount;
import com.cardpay.sdk.model.Customer;
import com.cardpay.sdk.model.EWalletAccount;
import com.cardpay.sdk.model.ResponseRecurringData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ## &#x60;payment page&#x60; or &#x60;gateway&#x60; * redirect_url  ## &#x60;server-to-server&#x60; mode with 3DS * PaReq * MD  ## &#x60;server-to-server&#x60; mode without 3DS ### All payment methods * customer * recurring_data ### BANKCARD * card_account ### BITCOIN * cryptocurrency_account ### ALIPAY, QIWI, WEBMONEY and NETELLER * ewallet_account  
 */
@ApiModel(description = "## `payment page` or `gateway` * redirect_url  ## `server-to-server` mode with 3DS * PaReq * MD  ## `server-to-server` mode without 3DS ### All payment methods * customer * recurring_data ### BANKCARD * card_account ### BITCOIN * cryptocurrency_account ### ALIPAY, QIWI, WEBMONEY and NETELLER * ewallet_account  ")

public class RecurringCreationResponse {
  @SerializedName("redirect_url")
  private String redirectUrl = null;

  @SerializedName("PaReq")
  private String paReq = null;

  @SerializedName("MD")
  private String MD = null;

  @SerializedName("customer")
  private Customer customer = null;

  @SerializedName("recurring_data")
  private ResponseRecurringData recurringData = null;

  @SerializedName("card_account")
  private CardAccount cardAccount = null;

  @SerializedName("cryptocurrency_account")
  private CryptocurrencyAccount cryptocurrencyAccount = null;

  @SerializedName("ewallet_account")
  private EWalletAccount ewalletAccount = null;

  public RecurringCreationResponse redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * URL a Customer should be redirected to
   * @return redirectUrl
  **/
  @ApiModelProperty(value = "URL a Customer should be redirected to")
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }

  public RecurringCreationResponse paReq(String paReq) {
    this.paReq = paReq;
    return this;
  }

   /**
   * Bank authentication request
   * @return paReq
  **/
  @ApiModelProperty(value = "Bank authentication request")
  public String getPaReq() {
    return paReq;
  }

  public void setPaReq(String paReq) {
    this.paReq = paReq;
  }

  public RecurringCreationResponse MD(String MD) {
    this.MD = MD;
    return this;
  }

   /**
   * Merchant Data
   * @return MD
  **/
  @ApiModelProperty(value = "Merchant Data")
  public String getMD() {
    return MD;
  }

  public void setMD(String MD) {
    this.MD = MD;
  }

  public RecurringCreationResponse customer(Customer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Customer data
   * @return customer
  **/
  @ApiModelProperty(value = "Customer data")
  public Customer getCustomer() {
    return customer;
  }

  public void setCustomer(Customer customer) {
    this.customer = customer;
  }

  public RecurringCreationResponse recurringData(ResponseRecurringData recurringData) {
    this.recurringData = recurringData;
    return this;
  }

   /**
   * Recurring data
   * @return recurringData
  **/
  @ApiModelProperty(value = "Recurring data")
  public ResponseRecurringData getRecurringData() {
    return recurringData;
  }

  public void setRecurringData(ResponseRecurringData recurringData) {
    this.recurringData = recurringData;
  }

  public RecurringCreationResponse cardAccount(CardAccount cardAccount) {
    this.cardAccount = cardAccount;
    return this;
  }

   /**
   * Card account data *(for BANKCARD payment method only)*
   * @return cardAccount
  **/
  @ApiModelProperty(value = "Card account data *(for BANKCARD payment method only)*")
  public CardAccount getCardAccount() {
    return cardAccount;
  }

  public void setCardAccount(CardAccount cardAccount) {
    this.cardAccount = cardAccount;
  }

  public RecurringCreationResponse cryptocurrencyAccount(CryptocurrencyAccount cryptocurrencyAccount) {
    this.cryptocurrencyAccount = cryptocurrencyAccount;
    return this;
  }

   /**
   * Cryptocurrency account data *(for BITCOIN payment method only)*
   * @return cryptocurrencyAccount
  **/
  @ApiModelProperty(value = "Cryptocurrency account data *(for BITCOIN payment method only)*")
  public CryptocurrencyAccount getCryptocurrencyAccount() {
    return cryptocurrencyAccount;
  }

  public void setCryptocurrencyAccount(CryptocurrencyAccount cryptocurrencyAccount) {
    this.cryptocurrencyAccount = cryptocurrencyAccount;
  }

  public RecurringCreationResponse ewalletAccount(EWalletAccount ewalletAccount) {
    this.ewalletAccount = ewalletAccount;
    return this;
  }

   /**
   * eWallet account data *(for ALIPAY, QIWI, WEBMONEY and NETELLER payment methods only)*
   * @return ewalletAccount
  **/
  @ApiModelProperty(value = "eWallet account data *(for ALIPAY, QIWI, WEBMONEY and NETELLER payment methods only)*")
  public EWalletAccount getEwalletAccount() {
    return ewalletAccount;
  }

  public void setEwalletAccount(EWalletAccount ewalletAccount) {
    this.ewalletAccount = ewalletAccount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecurringCreationResponse recurringCreationResponse = (RecurringCreationResponse) o;
    return Objects.equals(this.redirectUrl, recurringCreationResponse.redirectUrl) &&
        Objects.equals(this.paReq, recurringCreationResponse.paReq) &&
        Objects.equals(this.MD, recurringCreationResponse.MD) &&
        Objects.equals(this.customer, recurringCreationResponse.customer) &&
        Objects.equals(this.recurringData, recurringCreationResponse.recurringData) &&
        Objects.equals(this.cardAccount, recurringCreationResponse.cardAccount) &&
        Objects.equals(this.cryptocurrencyAccount, recurringCreationResponse.cryptocurrencyAccount) &&
        Objects.equals(this.ewalletAccount, recurringCreationResponse.ewalletAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(redirectUrl, paReq, MD, customer, recurringData, cardAccount, cryptocurrencyAccount, ewalletAccount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecurringCreationResponse {\n");
    
    if (redirectUrl != null) sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    if (paReq != null) sb.append("    paReq: ").append(toIndentedString(paReq)).append("\n");
    if (MD != null) sb.append("    MD: ").append(toIndentedString(MD)).append("\n");
    if (customer != null) sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    if (recurringData != null) sb.append("    recurringData: ").append(toIndentedString(recurringData)).append("\n");
    if (cardAccount != null) sb.append("    cardAccount: ").append(toIndentedString(cardAccount)).append("\n");
    if (cryptocurrencyAccount != null) sb.append("    cryptocurrencyAccount: ").append(toIndentedString(cryptocurrencyAccount)).append("\n");
    if (ewalletAccount != null) sb.append("    ewalletAccount: ").append(toIndentedString(ewalletAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

