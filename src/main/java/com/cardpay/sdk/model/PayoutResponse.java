/*
 * CardPay REST API
 * The CardPay API uses HTTP verbs and a RESTful endpoint structure. Request and response payloads are formatted as JSON.
 *
 * OpenAPI spec version: 3.0
 * Contact: support@cardpay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.cardpay.sdk.model.MerchantOrder;
import com.cardpay.sdk.model.PayoutCardAccount;
import com.cardpay.sdk.model.PayoutCryptocurrencyAccount;
import com.cardpay.sdk.model.PayoutCustomer;
import com.cardpay.sdk.model.PayoutData;
import com.cardpay.sdk.model.PayoutEWalletAccount;
import com.cardpay.sdk.model.PayoutPaymentData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PayoutResponse
 */

public class PayoutResponse {
  @SerializedName("card_account")
  private PayoutCardAccount cardAccount = null;

  @SerializedName("cryptocurrency_account")
  private PayoutCryptocurrencyAccount cryptocurrencyAccount = null;

  @SerializedName("customer")
  private PayoutCustomer customer = null;

  @SerializedName("ewallet_account")
  private PayoutEWalletAccount ewalletAccount = null;

  @SerializedName("payment_data")
  private PayoutPaymentData paymentData = null;

  @SerializedName("payout_data")
  private PayoutData payoutData = null;

  @SerializedName("payment_method")
  private String paymentMethod = null;

  @SerializedName("merchant_order")
  private MerchantOrder merchantOrder = null;

  public PayoutResponse cardAccount(PayoutCardAccount cardAccount) {
    this.cardAccount = cardAccount;
    return this;
  }

   /**
   * Card account data *(for BANKCARD payment method only)*
   * @return cardAccount
  **/
  @ApiModelProperty(value = "Card account data *(for BANKCARD payment method only)*")
  public PayoutCardAccount getCardAccount() {
    return cardAccount;
  }

  public void setCardAccount(PayoutCardAccount cardAccount) {
    this.cardAccount = cardAccount;
  }

  public PayoutResponse cryptocurrencyAccount(PayoutCryptocurrencyAccount cryptocurrencyAccount) {
    this.cryptocurrencyAccount = cryptocurrencyAccount;
    return this;
  }

   /**
   * Cryptocurrency account data *(for BITCOIN payment method only)*
   * @return cryptocurrencyAccount
  **/
  @ApiModelProperty(value = "Cryptocurrency account data *(for BITCOIN payment method only)*")
  public PayoutCryptocurrencyAccount getCryptocurrencyAccount() {
    return cryptocurrencyAccount;
  }

  public void setCryptocurrencyAccount(PayoutCryptocurrencyAccount cryptocurrencyAccount) {
    this.cryptocurrencyAccount = cryptocurrencyAccount;
  }

  public PayoutResponse customer(PayoutCustomer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Customer data
   * @return customer
  **/
  @ApiModelProperty(value = "Customer data")
  public PayoutCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(PayoutCustomer customer) {
    this.customer = customer;
  }

  public PayoutResponse ewalletAccount(PayoutEWalletAccount ewalletAccount) {
    this.ewalletAccount = ewalletAccount;
    return this;
  }

   /**
   * eWallet account data *(for NETELLER, WEBMONEY and QIWI payment methods only)*
   * @return ewalletAccount
  **/
  @ApiModelProperty(value = "eWallet account data *(for NETELLER, WEBMONEY and QIWI payment methods only)*")
  public PayoutEWalletAccount getEwalletAccount() {
    return ewalletAccount;
  }

  public void setEwalletAccount(PayoutEWalletAccount ewalletAccount) {
    this.ewalletAccount = ewalletAccount;
  }

  public PayoutResponse paymentData(PayoutPaymentData paymentData) {
    this.paymentData = paymentData;
    return this;
  }

   /**
   * Payment data
   * @return paymentData
  **/
  @ApiModelProperty(value = "Payment data")
  public PayoutPaymentData getPaymentData() {
    return paymentData;
  }

  public void setPaymentData(PayoutPaymentData paymentData) {
    this.paymentData = paymentData;
  }

  public PayoutResponse payoutData(PayoutData payoutData) {
    this.payoutData = payoutData;
    return this;
  }

   /**
   * Payout data
   * @return payoutData
  **/
  @ApiModelProperty(required = true, value = "Payout data")
  public PayoutData getPayoutData() {
    return payoutData;
  }

  public void setPayoutData(PayoutData payoutData) {
    this.payoutData = payoutData;
  }

  public PayoutResponse paymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Used payment method type name from payment methods list
   * @return paymentMethod
  **/
  @ApiModelProperty(example = "BANKCARD", value = "Used payment method type name from payment methods list")
  public String getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public PayoutResponse merchantOrder(MerchantOrder merchantOrder) {
    this.merchantOrder = merchantOrder;
    return this;
  }

   /**
   * Merchant order data
   * @return merchantOrder
  **/
  @ApiModelProperty(value = "Merchant order data")
  public MerchantOrder getMerchantOrder() {
    return merchantOrder;
  }

  public void setMerchantOrder(MerchantOrder merchantOrder) {
    this.merchantOrder = merchantOrder;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayoutResponse payoutResponse = (PayoutResponse) o;
    return Objects.equals(this.cardAccount, payoutResponse.cardAccount) &&
        Objects.equals(this.cryptocurrencyAccount, payoutResponse.cryptocurrencyAccount) &&
        Objects.equals(this.customer, payoutResponse.customer) &&
        Objects.equals(this.ewalletAccount, payoutResponse.ewalletAccount) &&
        Objects.equals(this.paymentData, payoutResponse.paymentData) &&
        Objects.equals(this.payoutData, payoutResponse.payoutData) &&
        Objects.equals(this.paymentMethod, payoutResponse.paymentMethod) &&
        Objects.equals(this.merchantOrder, payoutResponse.merchantOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardAccount, cryptocurrencyAccount, customer, ewalletAccount, paymentData, payoutData, paymentMethod, merchantOrder);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayoutResponse {\n");
    
    if (cardAccount != null) sb.append("    cardAccount: ").append(toIndentedString(cardAccount)).append("\n");
    if (cryptocurrencyAccount != null) sb.append("    cryptocurrencyAccount: ").append(toIndentedString(cryptocurrencyAccount)).append("\n");
    if (customer != null) sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    if (ewalletAccount != null) sb.append("    ewalletAccount: ").append(toIndentedString(ewalletAccount)).append("\n");
    if (paymentData != null) sb.append("    paymentData: ").append(toIndentedString(paymentData)).append("\n");
    if (payoutData != null) sb.append("    payoutData: ").append(toIndentedString(payoutData)).append("\n");
    if (paymentMethod != null) sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    if (merchantOrder != null) sb.append("    merchantOrder: ").append(toIndentedString(merchantOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

