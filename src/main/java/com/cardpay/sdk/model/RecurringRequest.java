/*
 * CardPay REST API
 * The CardPay API uses HTTP verbs and a RESTful endpoint structure. Request and response payloads are formatted as JSON.
 *
 * OpenAPI spec version: 3.0
 * Contact: support@cardpay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cardpay.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.cardpay.sdk.model.CardAccount;
import com.cardpay.sdk.model.PaymentMerchantOrder;
import com.cardpay.sdk.model.RecurringCustomer;
import com.cardpay.sdk.model.RecurringData;
import com.cardpay.sdk.model.Request;
import com.cardpay.sdk.model.ReturnUrls;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Recurrings can be used with BANKCARD payment method only
 */
@ApiModel(description = "Recurrings can be used with BANKCARD payment method only")

public class RecurringRequest {
  @SerializedName("request")
  private Request request = null;

  @SerializedName("card_account")
  private CardAccount cardAccount = null;

  @SerializedName("customer")
  private RecurringCustomer customer = null;

  @SerializedName("merchant_order")
  private PaymentMerchantOrder merchantOrder = null;

  @SerializedName("payment_method")
  private String paymentMethod = null;

  @SerializedName("recurring_data")
  private RecurringData recurringData = null;

  @SerializedName("return_urls")
  private ReturnUrls returnUrls = null;

  public RecurringRequest request(Request request) {
    this.request = request;
    return this;
  }

   /**
   * Request
   * @return request
  **/
  @ApiModelProperty(required = true, value = "Request")
  public Request getRequest() {
    return request;
  }

  public void setRequest(Request request) {
    this.request = request;
  }

  public RecurringRequest cardAccount(CardAccount cardAccount) {
    this.cardAccount = cardAccount;
    return this;
  }

   /**
   * Information about card
   * @return cardAccount
  **/
  @ApiModelProperty(value = "Information about card")
  public CardAccount getCardAccount() {
    return cardAccount;
  }

  public void setCardAccount(CardAccount cardAccount) {
    this.cardAccount = cardAccount;
  }

  public RecurringRequest customer(RecurringCustomer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Information about customer
   * @return customer
  **/
  @ApiModelProperty(required = true, value = "Information about customer")
  public RecurringCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(RecurringCustomer customer) {
    this.customer = customer;
  }

  public RecurringRequest merchantOrder(PaymentMerchantOrder merchantOrder) {
    this.merchantOrder = merchantOrder;
    return this;
  }

   /**
   * Merchant order data
   * @return merchantOrder
  **/
  @ApiModelProperty(required = true, value = "Merchant order data")
  public PaymentMerchantOrder getMerchantOrder() {
    return merchantOrder;
  }

  public void setMerchantOrder(PaymentMerchantOrder merchantOrder) {
    this.merchantOrder = merchantOrder;
  }

  public RecurringRequest paymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Used payment method type name from payment methods list
   * @return paymentMethod
  **/
  @ApiModelProperty(required = true, value = "Used payment method type name from payment methods list")
  public String getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public RecurringRequest recurringData(RecurringData recurringData) {
    this.recurringData = recurringData;
    return this;
  }

   /**
   * Recurring data
   * @return recurringData
  **/
  @ApiModelProperty(required = true, value = "Recurring data")
  public RecurringData getRecurringData() {
    return recurringData;
  }

  public void setRecurringData(RecurringData recurringData) {
    this.recurringData = recurringData;
  }

  public RecurringRequest returnUrls(ReturnUrls returnUrls) {
    this.returnUrls = returnUrls;
    return this;
  }

   /**
   * Return URLs are the URLs where customer returns by pressing &#x60;Back to the shop&#x60; or &#x60;Cancel&#x60; button in Payment Page mode and redirected automatically in Gateway mode
   * @return returnUrls
  **/
  @ApiModelProperty(value = "Return URLs are the URLs where customer returns by pressing `Back to the shop` or `Cancel` button in Payment Page mode and redirected automatically in Gateway mode")
  public ReturnUrls getReturnUrls() {
    return returnUrls;
  }

  public void setReturnUrls(ReturnUrls returnUrls) {
    this.returnUrls = returnUrls;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecurringRequest recurringRequest = (RecurringRequest) o;
    return Objects.equals(this.request, recurringRequest.request) &&
        Objects.equals(this.cardAccount, recurringRequest.cardAccount) &&
        Objects.equals(this.customer, recurringRequest.customer) &&
        Objects.equals(this.merchantOrder, recurringRequest.merchantOrder) &&
        Objects.equals(this.paymentMethod, recurringRequest.paymentMethod) &&
        Objects.equals(this.recurringData, recurringRequest.recurringData) &&
        Objects.equals(this.returnUrls, recurringRequest.returnUrls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(request, cardAccount, customer, merchantOrder, paymentMethod, recurringData, returnUrls);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecurringRequest {\n");
    
    if (request != null) sb.append("    request: ").append(toIndentedString(request)).append("\n");
    if (cardAccount != null) sb.append("    cardAccount: ").append(toIndentedString(cardAccount)).append("\n");
    if (customer != null) sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    if (merchantOrder != null) sb.append("    merchantOrder: ").append(toIndentedString(merchantOrder)).append("\n");
    if (paymentMethod != null) sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    if (recurringData != null) sb.append("    recurringData: ").append(toIndentedString(recurringData)).append("\n");
    if (returnUrls != null) sb.append("    returnUrls: ").append(toIndentedString(returnUrls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

